Documentation for `crates.nvim` `<VERSION>`

# Features
- Complete crate versions and features
- In-process language server
- Completion sources for:
    - [nvim-cmp](https://github.com/hrsh7th/nvim-cmp)
    - [coq.nvim](https://github.com/ms-jpq/coq_nvim)
- [null-ls.nvim](https://github.com/jose-elias-alvarez/null-ls.nvim)/[none-ls.nvim](https://github.com/nvimtools/none-ls.nvim) code actions
- Update crates to newest compatible version
- Upgrade crates to newest version
- Respect existing version requirements and update them in an elegant way (`smart_insert`)
- Automatically load when opening a `Cargo.toml` file (`autoload`)
- Live update while editing (`autoupdate`)
- Show version and upgrade candidates
    - Indicate if compatible version is a pre-release or yanked
    - Indicate if no version is compatible
- Open floating window with crate info
    - Open documentation, crates.io, repository and homepage urls
- Open floating window with crate versions
    - Select a version by pressing enter (`popup.keys.select`)
- Open floating window with crate features
    - Navigate the feature hierarchy
    - Enable/disable features
    - Indicate if a feature is enabled directly or transitively
- Open floating window with crate dependencies
    - Navigate the dependency hierarchy
    - Indicate if a dependency is optional

# Setup

## lsp
Enable the in-process language server in the setup and select whether to enable
code actions and auto completion.
```lua
require("crates").setup {
    ...
    lsp = {
        enabled = true,
        on_attach = function(client, bufnr)
            -- the same on_attach function as for your other lsp's
        end,
        actions = true,
        completion = true,
    },
}
```

## Auto completion
### [nvim-cmp](https://github.com/hrsh7th/nvim-cmp) source

Enable it in the setup.
```lua
require("crates").setup {
    ...
    src = {
        ...
        cmp = {
            enabled = true,
        },
    },
}
```

And add it to your list of sources.
```lua
require("cmp").setup {
    ...
    sources = {
        { name = "path" },
        { name = "buffer" },
        { name = "nvim_lsp" },
        ...
        { name = "crates" },
    },
}
```

<details>
<summary>Or add it lazily.</summary>

```lua
vim.api.nvim_create_autocmd("BufRead", {
    group = vim.api.nvim_create_augroup("CmpSourceCargo", { clear = true }),
    pattern = "Cargo.toml",
    callback = function()
        cmp.setup.buffer({ sources = { { name = "crates" } } })
    end,
})
```
</details>

### [coq.nvim](https://github.com/ms-jpq/coq_nvim) source
Enable it in the setup, and optionally change the display name.
```lua
require("crates").setup {
    ...
    src = {
        ...
        coq = {
            enabled = true,
            name = "crates.nvim",
        },
    },
}
```

## Code actions
### [null-ls.nvim](https://github.com/jose-elias-alvarez/null-ls.nvim)/[none-ls.nvim](https://github.com/nvimtools/none-ls.nvim) source
Enable it in the setup, and optionally change the display name.
```lua
require("crates").setup {
    ...
    null_ls = {
        enabled = true,
        name = "crates.nvim",
    },
}
```

# Config

For more information about the type of some fields see [`teal/crates/config.tl`](teal/crates/config.tl).

## Default

The icons in the default configuration require a patched font.<br>
Any [Nerd Font](https://www.nerdfonts.com/font-downloads) should work.
```lua
require("crates").setup {
    <SHARED:DEFAULT_CONFIGURATION>
}
```

## Plain text

Replace these fields if you don"t have a patched font.
```lua
require("crates").setup {
    <SHARED:plain_text_config.lua>
}
```

## Functions
```lua
<SHARED:FUNCTIONS>
```

## Command
```vim
:Crates <subcmd>
```
Run a crates.nvim `<subcmd>`. All `<subcmd>`s are just wrappers around the
corresponding functions. These are the functions available as commands:
<SHARED:SUBCOMMANDS>

## Key mappings
Some examples of key mappings.
```lua
<SHARED:keymaps.lua>
```

<details>
<summary>In vimscript</summary>

```vim
<SHARED:keymaps.vim>
```
</details>

## Show appropriate documentation in `Cargo.toml`
How you might integrate `show_popup` into your `init.vim`.
```vim
<SHARED:show_docs.vim>
```

How you might integrate `show_popup` into your `init.lua`.
```lua
<SHARED:show_docs.lua>
```
